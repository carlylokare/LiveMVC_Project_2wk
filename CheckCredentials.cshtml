


<!-- Replace all code in the Worktimeventcontroller/create action that checks the user's credentials with a call to the CheckCredentials method in the AccountController -->



<!-- OLD CODE -->



/* *****************************************************************************
         *                             CREATE A WORKTIMEEVENT
         * *************************************************************************** */
        // POST: WorkTimeEvent/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult Create(LoginViewModel lvm)    // workTimeEvent grabs the login email, password, and remember me
        {
            //Get the current time first thing to ensure there's minimal delay between selecting clockin on the front-end and the time saved in the database
            DateTime? dt = DateTime.Now;


            // Checks Db users for email that matches the email user typed in
            ApplicationUser dbUser = db.Users.FirstOrDefault(x => x.Email == lvm.Email);

            // If employee doesn't exist
            if (dbUser == null)
            {
                ModelState.AddModelError("", "There was a problem with your credentials or account status. Please try again or contact your system administrator if the problem continues.");
                return View("~/Views/Account/Login.cshtml", lvm);
            }

            //If email is found, verify the password.
            // Grabs user hashed PW from Db and PW user typed in and checks if they match
            PasswordHasher ph = new PasswordHasher();
            var result = ph.VerifyHashedPassword(dbUser.PasswordHash, lvm.Password);
            // If PW doesn't match
            if (result != PasswordVerificationResult.Success)
            {
                ModelState.AddModelError("", "There was a problem with your credentials or account status. Please try again or contact your system administrator if the problem continues.");
                return View("~/Views/Account/Login.cshtml", lvm);
            }

            // Check if user is clocked in by checking if any events exist without an end time.
            var notFinishedEvent = db.WorkTimeEvents.FirstOrDefault(x => x.Id == dbUser.Id && !x.End.HasValue);


            // If an event is found that doesn't have an end value, the user is currently clocked in
            if (notFinishedEvent != null)
            {
                //Update the current open event with an end datetime.
                notFinishedEvent.Clockout();
                db.SaveChanges();
                //Create message to be passed to the Login Action for use on Login View
                TempData["message"] = "Successful Clock out at " + DateTime.Now.ToString("h:mm tt");
                return RedirectToAction("Login", "Account");
            }
            else
            {
                //If not clocked in, create a new worktimevent and set it's date to right now.
                WorkTimeEvent clockIn = new WorkTimeEvent(dbUser, dt);
                db.WorkTimeEvents.Add(clockIn);
                db.SaveChanges();


                //Create message to be passed to the Login Action for use on Login View
                TempData["message"] = "Successful Clock in at " + DateTime.Now.ToString("h:mm tt");
                return RedirectToAction("Login", "Account");


            }
        }

<!--_MessageCount.cshtml-->

@*<li class="glyphicon glyphicon-inbox">@Html.ActionLink((string)ViewBag.MessageCount, "Index", "Message")</li>*@ <!--Added Messages link-->
<li> <a href='@Url.Action("Index","Message")' class="glyphicon glyphicon-inbox">@ViewBag.MessageCount</a></li>
<!--This partial gets the current Message Count from AccountController.cs-->
<!--and sends the LI with the Message Count to _Layout.cs-->





<!--NEW CODE-->



 /* *****************************************************************************
         *                             CREATE A WORKTIMEEVENT
         * *************************************************************************** */
        // POST: WorkTimeEvent/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult Create(LoginViewModel lvm)    // workTimeEvent grabs the login email, password, and remember me
        {
            //Get the current time first thing to ensure there's minimal delay between selecting clockin on the front-end and the time saved in the database
            DateTime? dt = DateTime.Now;

            // Checks Db users for email that matches the email user typed in
            ApplicationUser dbUser = db.Users.FirstOrDefault(x => x.Email == lvm.Email);


            //Checks if the user's credentials are valid, if not, prompts an error message
            if (!AccountController.CheckCredentials(lvm))
            {
                ModelState.AddModelError("", "There was a problem with your credentials or account status. Please try again or contact your system administrator if the problem continues.");
                return View("~/Views/Account/Login.cshtml", lvm);
            }

            // Check if user is clocked in by checking if any events exist without an end time.
            var notFinishedEvent = db.WorkTimeEvents.FirstOrDefault(x => x.Id == dbUser.Id && !x.End.HasValue);


            // If an event is found that doesn't have an end value, the user is currently clocked in
            if (notFinishedEvent != null)
            {
                //Update the current open event with an end datetime.
                notFinishedEvent.Clockout();
                db.SaveChanges();
                //Create message to be passed to the Login Action for use on Login View
                TempData["message"] = "Successful Clock out at " + DateTime.Now.ToString("h:mm tt");
                return RedirectToAction("Login", "Account");
            }
            else
            {
                //If not clocked in, create a new worktimevent and set it's date to right now.
                WorkTimeEvent clockIn = new WorkTimeEvent(dbUser, dt);
                db.WorkTimeEvents.Add(clockIn);
                db.SaveChanges();

                //Create message to be passed to the Login Action for use on Login View
                TempData["message"] = "Successful Clock in at " + DateTime.Now.ToString("h:mm tt");
                return RedirectToAction("Login", "Account");
            }
        }

<!--_MessageCount.cshtml-->


@*<li class="glyphicon glyphicon-inbox">@Html.ActionLink((string)ViewBag.MessageCount, "Index", "Message")</li>*@ <!--Added Messages link-->
<li> <a href='@Url.Action("Index","Message")' class="glyphicon glyphicon-inbox" title="Messages">@ViewBag.MessageCount</a></li>
<!--This partial gets the current Message Count from AccountController.cs-->
<!--and sends the LI with the Message Count to _Layout.cs-->
